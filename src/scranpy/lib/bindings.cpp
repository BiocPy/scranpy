/* DO NOT MODIFY: this is automatically generated by the ctypes-compiler */

#include <cstring>
#include <stdexcept>

#ifdef _WIN32
#define PYAPI __declspec(dllexport)
#else
#define PYAPI
#endif

static char* copy_error_message(const char* original) {
    auto n = std::strlen(original);
    auto copy = new char[n + 1];
    std::strcpy(copy, original);
    return copy;
}

void* log_norm_counts(const void*, uint8_t, const int32_t*, uint8_t, const double*, uint8_t, uint8_t, uint8_t, int);

void* build_snn_graph_from_nn_results(const void*, const char*, int);

void* build_snn_graph_from_nn_index(const void*, int, const char*, int);

int fetch_snn_graph_edges(const void*);

const int* fetch_snn_graph_indices(const void*);

const double* fetch_snn_graph_weights(const void*);

void free_snn_graph(void*);

void* build_neighbor_index(int, int, const double*, uint8_t);

int fetch_neighbor_index_ndim(const void*);

int fetch_neighbor_index_nobs(const void*);

void free_neighbor_index(void*);

void* find_nearest_neighbors(const void*, int, int);

int fetch_neighbor_results_nobs(const void*);

int fetch_neighbor_results_k(const void*);

void fetch_neighbor_results_single(const void*, int, int32_t*, double*);

void free_neighbor_results(void*);

void serialize_neighbor_results(const void*, int32_t*, double*);

void* unserialize_neighbor_results(int, int, int32_t*, double*);

extern "C" {

PYAPI void free_error_message(char** msg) {
    delete [] *msg;
}

PYAPI void* py_log_norm_counts(const void* mat0, uint8_t use_block, const int32_t* block, uint8_t use_size_factors, const double* size_factors, uint8_t center, uint8_t allow_zeros, uint8_t allow_non_finite, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = log_norm_counts(mat0, use_block, block, use_size_factors, size_factors, center, allow_zeros, allow_non_finite, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void* py_build_snn_graph_from_nn_results(const void* x, const char* weight_scheme, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = build_snn_graph_from_nn_results(x, weight_scheme, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void* py_build_snn_graph_from_nn_index(const void* x, int num_neighbors, const char* weight_scheme, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = build_snn_graph_from_nn_index(x, num_neighbors, weight_scheme, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_snn_graph_edges(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_snn_graph_edges(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const int* py_fetch_snn_graph_indices(const void* ptr, int* errcode, char** errmsg) {
    const int* output;
    try {
        output = fetch_snn_graph_indices(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const double* py_fetch_snn_graph_weights(const void* ptr, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_snn_graph_weights(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_snn_graph(void* ptr, int* errcode, char** errmsg) {
    try {
        free_snn_graph(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_build_neighbor_index(int ndim, int nobs, const double* ptr, uint8_t approximate, int* errcode, char** errmsg) {
    void* output;
    try {
        output = build_neighbor_index(ndim, nobs, ptr, approximate);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_index_ndim(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_index_ndim(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_index_nobs(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_index_nobs(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_neighbor_index(void* ptr, int* errcode, char** errmsg) {
    try {
        free_neighbor_index(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_find_nearest_neighbors(const void* index, int k, int nthreads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = find_nearest_neighbors(index, k, nthreads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_results_nobs(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_results_nobs(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_results_k(const void* ptr0, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_results_k(ptr0);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_fetch_neighbor_results_single(const void* ptr0, int i, int32_t* outdex, double* outdist, int* errcode, char** errmsg) {
    try {
        fetch_neighbor_results_single(ptr0, i, outdex, outdist);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void py_free_neighbor_results(void* ptr, int* errcode, char** errmsg) {
    try {
        free_neighbor_results(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void py_serialize_neighbor_results(const void* ptr0, int32_t* outdex, double* outdist, int* errcode, char** errmsg) {
    try {
        serialize_neighbor_results(ptr0, outdex, outdist);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_unserialize_neighbor_results(int nobs, int k, int32_t* indices, double* distances, int* errcode, char** errmsg) {
    void* output;
    try {
        output = unserialize_neighbor_results(nobs, k, indices, distances);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

}
