/* DO NOT MODIFY: this is automatically generated by the ctypes-compiler */

#include <cstring>
#include <stdexcept>

#ifdef _WIN32
#define PYAPI __declspec(dllexport)
#else
#define PYAPI
#endif

static char* copy_error_message(const char* original) {
    auto n = std::strlen(original);
    auto copy = new char[n + 1];
    std::strcpy(copy, original);
    return copy;
}

void* log_norm_counts(const void*, uint8_t, const int32_t*, uint8_t, const double*, uint8_t, uint8_t, uint8_t, int);

void model_gene_variances(const void*, double*, double*, double*, double*, double, int);

void model_gene_variances_blocked(const void*, double*, double*, double*, double*, int, const int32_t*, uintptr_t*, uintptr_t*, uintptr_t*, uintptr_t*, double, int);

void score_markers(const void*, int, const int32_t*, int, const int32_t*, uint8_t, double, uintptr_t*, uintptr_t*, uintptr_t*, uintptr_t*, uintptr_t*, uintptr_t*, int);

const double* fetch_simple_pca_coordinates(const void*);

const double* fetch_simple_pca_variance_explained(const void*);

double fetch_simple_pca_total_variance(const void*);

int fetch_simple_pca_num_dims(const void*);

void free_simple_pca(void*);

void* run_simple_pca(const void*, int, uint8_t, const uint8_t*, uint8_t, int);

const double* fetch_residual_pca_coordinates(const void*);

const double* fetch_residual_pca_variance_explained(const void*);

double fetch_residual_pca_total_variance(const void*);

int fetch_residual_pca_num_dims(const void*);

void free_residual_pca(void*);

void* run_residual_pca(const void*, const int32_t*, uint8_t, int, uint8_t, const uint8_t*, uint8_t, int);

const double* fetch_multibatch_pca_coordinates(const void*);

const double* fetch_multibatch_pca_variance_explained(const void*);

double fetch_multibatch_pca_total_variance(const void*);

int fetch_multibatch_pca_num_dims(const void*);

void free_multibatch_pca(void*);

void* run_multibatch_pca(const void*, const int32_t*, uint8_t, uint8_t, int, uint8_t, const uint8_t*, uint8_t, int);

void suggest_rna_qc_filters(int, int, double*, int32_t*, uintptr_t*, int, const int32_t*, double*, double*, uintptr_t*, double);

void* initialize_umap(const void*, int, double, double*, int);

int fetch_umap_status_nobs(const void*);

int fetch_umap_status_epoch(const void*);

int fetch_umap_status_num_epochs(const void*);

void free_umap_status(void*);

void* clone_umap_status(const void*, double*);

void run_umap(void*, int);

void* initialize_tsne(const void*, double, int);

void randomize_tsne_start(size_t, double*, int);

int fetch_tsne_status_iteration(const void*);

int fetch_tsne_status_nobs(const void*);

void free_tsne_status(void*);

void* clone_tsne_status(const void*);

int perplexity_to_k(double);

void run_tsne(void*, int, double*);

void* build_snn_graph_from_nn_results(const void*, const char*, int);

void* build_snn_graph_from_nn_index(const void*, int, const char*, int);

int fetch_snn_graph_edges(const void*);

const int* fetch_snn_graph_indices(const void*);

const double* fetch_snn_graph_weights(const void*);

void free_snn_graph(void*);

void* build_neighbor_index(int, int, const double*, uint8_t);

int fetch_neighbor_index_ndim(const void*);

int fetch_neighbor_index_nobs(const void*);

void free_neighbor_index(void*);

void* find_nearest_neighbors(const void*, int, int);

int fetch_neighbor_results_nobs(const void*);

int fetch_neighbor_results_k(const void*);

void fetch_neighbor_results_single(const void*, int, int32_t*, double*);

void free_neighbor_results(void*);

void serialize_neighbor_results(const void*, int32_t*, double*);

void* unserialize_neighbor_results(int, int, int32_t*, double*);

extern "C" {

PYAPI void free_error_message(char** msg) {
    delete [] *msg;
}

PYAPI void* py_log_norm_counts(const void* mat0, uint8_t use_block, const int32_t* block, uint8_t use_size_factors, const double* size_factors, uint8_t center, uint8_t allow_zeros, uint8_t allow_non_finite, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = log_norm_counts(mat0, use_block, block, use_size_factors, size_factors, center, allow_zeros, allow_non_finite, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_model_gene_variances(const void* mat, double* means, double* variances, double* fitted, double* residuals, double span, int num_threads, int* errcode, char** errmsg) {
    try {
        model_gene_variances(mat, means, variances, fitted, residuals, span, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void py_model_gene_variances_blocked(const void* mat, double* ave_means, double* ave_detected, double* ave_fitted, double* ave_residuals, int num_blocks, const int32_t* block, uintptr_t* block_means, uintptr_t* block_variances, uintptr_t* block_fitted, uintptr_t* block_residuals, double span, int num_threads, int* errcode, char** errmsg) {
    try {
        model_gene_variances_blocked(mat, ave_means, ave_detected, ave_fitted, ave_residuals, num_blocks, block, block_means, block_variances, block_fitted, block_residuals, span, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void py_score_markers(const void* mat, int num_clusters, const int32_t* clusters, int num_blocks, const int32_t* block, uint8_t do_auc, double threshold, uintptr_t* raw_means, uintptr_t* raw_detected, uintptr_t* raw_cohen, uintptr_t* raw_auc, uintptr_t* raw_lfc, uintptr_t* raw_delta_detected, int num_threads, int* errcode, char** errmsg) {
    try {
        score_markers(mat, num_clusters, clusters, num_blocks, block, do_auc, threshold, raw_means, raw_detected, raw_cohen, raw_auc, raw_lfc, raw_delta_detected, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI const double* py_fetch_simple_pca_coordinates(const void* x, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_simple_pca_coordinates(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const double* py_fetch_simple_pca_variance_explained(const void* x, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_simple_pca_variance_explained(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI double py_fetch_simple_pca_total_variance(const void* x, int* errcode, char** errmsg) {
    double output;
    try {
        output = fetch_simple_pca_total_variance(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_simple_pca_num_dims(const void* x, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_simple_pca_num_dims(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_simple_pca(void* x, int* errcode, char** errmsg) {
    try {
        free_simple_pca(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_run_simple_pca(const void* mat, int number, uint8_t use_subset, const uint8_t* subset, uint8_t scale, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = run_simple_pca(mat, number, use_subset, subset, scale, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const double* py_fetch_residual_pca_coordinates(const void* x, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_residual_pca_coordinates(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const double* py_fetch_residual_pca_variance_explained(const void* x, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_residual_pca_variance_explained(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI double py_fetch_residual_pca_total_variance(const void* x, int* errcode, char** errmsg) {
    double output;
    try {
        output = fetch_residual_pca_total_variance(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_residual_pca_num_dims(const void* x, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_residual_pca_num_dims(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_residual_pca(void* x, int* errcode, char** errmsg) {
    try {
        free_residual_pca(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_run_residual_pca(const void* mat, const int32_t* block, uint8_t equal_weights, int number, uint8_t use_subset, const uint8_t* subset, uint8_t scale, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = run_residual_pca(mat, block, equal_weights, number, use_subset, subset, scale, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const double* py_fetch_multibatch_pca_coordinates(const void* x, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_multibatch_pca_coordinates(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const double* py_fetch_multibatch_pca_variance_explained(const void* x, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_multibatch_pca_variance_explained(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI double py_fetch_multibatch_pca_total_variance(const void* x, int* errcode, char** errmsg) {
    double output;
    try {
        output = fetch_multibatch_pca_total_variance(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_multibatch_pca_num_dims(const void* x, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_multibatch_pca_num_dims(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_multibatch_pca(void* x, int* errcode, char** errmsg) {
    try {
        free_multibatch_pca(x);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_run_multibatch_pca(const void* mat, const int32_t* block, uint8_t use_residuals, uint8_t equal_weights, int number, uint8_t use_subset, const uint8_t* subset, uint8_t scale, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = run_multibatch_pca(mat, block, use_residuals, equal_weights, number, use_subset, subset, scale, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_suggest_rna_qc_filters(int num_cells, int num_subsets, double* sums, int32_t* detected, uintptr_t* subset_proportions, int num_blocks, const int32_t* block, double* sums_out, double* detected_out, uintptr_t* subset_proportions_out, double nmads, int* errcode, char** errmsg) {
    try {
        suggest_rna_qc_filters(num_cells, num_subsets, sums, detected, subset_proportions, num_blocks, block, sums_out, detected_out, subset_proportions_out, nmads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_initialize_umap(const void* neighbors, int num_epochs, double min_dist, double* Y, int nthreads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = initialize_umap(neighbors, num_epochs, min_dist, Y, nthreads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_umap_status_nobs(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_umap_status_nobs(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_umap_status_epoch(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_umap_status_epoch(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_umap_status_num_epochs(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_umap_status_num_epochs(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_umap_status(void* ptr, int* errcode, char** errmsg) {
    try {
        free_umap_status(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_clone_umap_status(const void* ptr, double* cloned, int* errcode, char** errmsg) {
    void* output;
    try {
        output = clone_umap_status(ptr, cloned);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_run_umap(void* status, int max_epoch, int* errcode, char** errmsg) {
    try {
        run_umap(status, max_epoch);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_initialize_tsne(const void* neighbors, double perplexity, int nthreads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = initialize_tsne(neighbors, perplexity, nthreads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_randomize_tsne_start(size_t n, double* Y, int seed, int* errcode, char** errmsg) {
    try {
        randomize_tsne_start(n, Y, seed);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI int py_fetch_tsne_status_iteration(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_tsne_status_iteration(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_tsne_status_nobs(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_tsne_status_nobs(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_tsne_status(void* ptr, int* errcode, char** errmsg) {
    try {
        free_tsne_status(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_clone_tsne_status(const void* ptr, int* errcode, char** errmsg) {
    void* output;
    try {
        output = clone_tsne_status(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_perplexity_to_k(double perplexity, int* errcode, char** errmsg) {
    int output;
    try {
        output = perplexity_to_k(perplexity);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_run_tsne(void* status, int maxiter, double* Y, int* errcode, char** errmsg) {
    try {
        run_tsne(status, maxiter, Y);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_build_snn_graph_from_nn_results(const void* x, const char* weight_scheme, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = build_snn_graph_from_nn_results(x, weight_scheme, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void* py_build_snn_graph_from_nn_index(const void* x, int num_neighbors, const char* weight_scheme, int num_threads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = build_snn_graph_from_nn_index(x, num_neighbors, weight_scheme, num_threads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_snn_graph_edges(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_snn_graph_edges(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const int* py_fetch_snn_graph_indices(const void* ptr, int* errcode, char** errmsg) {
    const int* output;
    try {
        output = fetch_snn_graph_indices(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI const double* py_fetch_snn_graph_weights(const void* ptr, int* errcode, char** errmsg) {
    const double* output;
    try {
        output = fetch_snn_graph_weights(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_snn_graph(void* ptr, int* errcode, char** errmsg) {
    try {
        free_snn_graph(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_build_neighbor_index(int ndim, int nobs, const double* ptr, uint8_t approximate, int* errcode, char** errmsg) {
    void* output;
    try {
        output = build_neighbor_index(ndim, nobs, ptr, approximate);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_index_ndim(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_index_ndim(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_index_nobs(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_index_nobs(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_free_neighbor_index(void* ptr, int* errcode, char** errmsg) {
    try {
        free_neighbor_index(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_find_nearest_neighbors(const void* index, int k, int nthreads, int* errcode, char** errmsg) {
    void* output;
    try {
        output = find_nearest_neighbors(index, k, nthreads);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_results_nobs(const void* ptr, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_results_nobs(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI int py_fetch_neighbor_results_k(const void* ptr0, int* errcode, char** errmsg) {
    int output;
    try {
        output = fetch_neighbor_results_k(ptr0);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

PYAPI void py_fetch_neighbor_results_single(const void* ptr0, int i, int32_t* outdex, double* outdist, int* errcode, char** errmsg) {
    try {
        fetch_neighbor_results_single(ptr0, i, outdex, outdist);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void py_free_neighbor_results(void* ptr, int* errcode, char** errmsg) {
    try {
        free_neighbor_results(ptr);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void py_serialize_neighbor_results(const void* ptr0, int32_t* outdex, double* outdist, int* errcode, char** errmsg) {
    try {
        serialize_neighbor_results(ptr0, outdex, outdist);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
}

PYAPI void* py_unserialize_neighbor_results(int nobs, int k, int32_t* indices, double* distances, int* errcode, char** errmsg) {
    void* output;
    try {
        output = unserialize_neighbor_results(nobs, k, indices, distances);
    } catch(std::exception& e) {
        *errcode = 1;
        *errmsg = copy_error_message(e.what());
    } catch(...) {
        *errcode = 1;
        *errmsg = copy_error_message("unknown C++ exception");
    }
    return output;
}

}
