# DO NOT MODIFY THIS FILE! This is automatically generated by '../../scripts/dryrun.py'
# from the source file 'analyze_live.py', modify that instead and rerun the script.

from .analyze_live import AnalyzeOptions

def __dry_analyze(options: AnalyzeOptions=AnalyzeOptions()) ->string:
    __commands = []
    __commands.append('results = AnalyzeResults()\n')
    __commands.append('subsets = {}\n')
    if options.quality_control.mito_subset is not None:
        if isinstance(options.quality_control.mito_subset, str):
            __commands.append(
                """subsets['mito'] = qc.guess_mito_from_symbols(features, options.
    quality_control.mito_subset)
"""
                )
        elif isinstance(options.quality_control.mito_subset, bool):
            __commands.append(
                "subsets['mito'] = qc.guess_mito_from_symbols(features)\n")
        else:
            raise ValueError(
                f'Unsupported value provided for `qc_mito_subset`: {options.quality_control.mito_subset}'
                )
    __commands.append('results.quality_control.subsets = subsets\n')
    __commands.append(
        """rna_options = copy.deepcopy(options.quality_control.per_cell_rna_qc_metrics)
"""
        )
    __commands.append('rna_options.subsets = subsets\n')
    __commands.append(
        """results.quality_control.qc_metrics = qc.per_cell_rna_qc_metrics(matrix,
    options=rna_options)
"""
        )
    __commands.append(
        """results.quality_control.qc_thresholds = qc.suggest_rna_qc_filters(results.
    quality_control.qc_metrics, options=options.quality_control.
    suggest_rna_qc_filters)
"""
        )
    if options.quality_control.custom_thresholds is not None:
        if not isinstance(options.quality_control.custom_thresholds, BiocFrame
            ):
            __commands.append(
                """raise TypeError("'qc_custom_thresholds' is not a `BiocFrame` object.")
"""
                )
        for col in results.quality_control.qc_thresholds.columnNames:
            if col in options.quality_control.custom_thresholds.columnNames:
                __commands.append(
                    """results.quality_control.qc_thresholds.column(col).fill(options.
    quality_control.custom_thresholds[col])
"""
                    )
    __commands.append(
        """results.quality_control.qc_filter = qc.create_rna_qc_filter(results.
    quality_control.qc_metrics, results.quality_control.qc_thresholds,
    options.quality_control.create_rna_qc_filter)
"""
        )
    __commands.append(
        """results.quality_control.filtered_cells = qc.filter_cells(ptr, filter=
    results.quality_control.qc_filter)
"""
        )
    __commands.append(
        """results.normalization.log_norm_counts = norm.log_norm_counts(results.
    quality_control.filtered_cells, options=options.normalization.
    log_norm_counts)
"""
        )
    __commands.append(
        """results.feature_selection.gene_variances = feat.model_gene_variances(results
    .normalization.log_norm_counts, options=options.feature_selection.
    model_gene_variances)
"""
        )
    __commands.append(
        """results.feature_selection.hvgs = feat.choose_hvgs(results.feature_selection
    .gene_variances.column('residuals'), options=options.feature_selection.
    choose_hvgs)
"""
        )
    __commands.append(
        """options.dimensionality_reduction.run_pca.subset = (results.
    feature_selection.hvgs)
"""
        )
    __commands.append(
        """results.dimensionality_reduction.pca = dimred.run_pca(results.normalization
    .log_norm_counts, options=options.dimensionality_reduction.run_pca)
"""
        )
    __commands.append(
        """results.nearest_neighbors.nearest_neighbor_index = nn.build_neighbor_index(
    results.dimensionality_reduction.pca.principal_components, options=nn.
    BuildNeighborIndexOptions(approximate=True))
"""
        )
    __commands.append(
        """tsne_nn = dimred.tsne_perplexity_to_neighbors(options.
    dimensionality_reduction.run_tsne.initialize_tsne.perplexity)
"""
        )
    __commands.append(
        """umap_nn = (options.dimensionality_reduction.run_umap.initialize_umap.
    num_neighbors)
"""
        )
    __commands.append(
        'snn_nn = options.clustering.build_snn_graph.num_neighbors\n')
    __commands.append('nn_dict = {}\n')
    for k in set([umap_nn, tsne_nn, snn_nn]):
        __commands.append(
            """nn_dict[k] = nn.find_nearest_neighbors(results.nearest_neighbors.
    nearest_neighbor_index, k=k, options=options.nearest_neighbors.
    find_nearest_neighbors)
"""
            )
    __commands.append('executor = ProcessPoolExecutor(max_workers=2)\n')
    __commands.append('_tasks = []\n')
    __commands.append(
        """_tasks.append(executor.submit(dimred.run_tsne, nn_dict[tsne_nn], options.
    dimensionality_reduction.run_tsne))
"""
        )
    __commands.append(
        """_tasks.append(executor.submit(dimred.run_umap, nn_dict[umap_nn], options.
    dimensionality_reduction.run_umap))
"""
        )
    __commands.append('remaining_threads = max(1, options.num_threads - 2)\n')
    __commands.append('options.clustering.set_threads(remaining_threads)\n')
    __commands.append(
        """results.clustering.build_snn_graph = clust.build_snn_graph(nn_dict[snn_nn],
    options=options.clustering.build_snn_graph)
"""
        )
    __commands.append(
        """results.clustering.clusters = (results.clustering.build_snn_graph.
    community_multilevel(resolution=options.clustering.resolution).membership)
"""
        )
    __commands.append(
        'options.marker_detection.set_threads(remaining_threads)\n')
    __commands.append(
        """results.marker_detection.markers = mark.score_markers(results.normalization
    .log_norm_counts, grouping=results.clustering.clusters, options=options
    .marker_detection.score_markers)
"""
        )
    __commands.append('embeddings = []\n')
    for task in _tasks:
        __commands.append('embeddings.append(task.result())\n')
    __commands.append('executor.shutdown()\n')
    __commands.append('results.dimensionality_reduction.tsne = embeddings[0]\n'
        )
    __commands.append('results.dimensionality_reduction.umap = embeddings[1]\n'
        )
    return ''.join(__commands)

