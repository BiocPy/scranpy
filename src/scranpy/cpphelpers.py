# DO NOT MODIFY: this is automatically generated by the ctypes-compiler

import os
import ctypes as ct

# TODO: surely there's a better way than whatever this is.
dirname = os.path.dirname(os.path.abspath(__file__))
contents = os.listdir(dirname)
lib = None
for x in contents:
    if x.startswith('core') and not x.endswith("py"):
        lib = ct.CDLL(os.path.join(dirname, x))

if lib is None:
    raise ImportError("failed to find the core.* module")

lib.free_error_message.argtypes = [ ct.POINTER(ct.c_char_p) ]

lib.py_log_norm_counts.restype = ct.c_void_p
lib.py_log_norm_counts.argtypes = [
    ct.c_void_p,
    ct.c_uint8,
    ct.c_void_p,
    ct.c_uint8,
    ct.c_void_p,
    ct.c_uint8,
    ct.c_uint8,
    ct.c_uint8,
    ct.c_int,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_build_snn_graph_from_nn_results.restype = ct.c_void_p
lib.py_build_snn_graph_from_nn_results.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.c_int,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_build_snn_graph_from_nn_index.restype = ct.c_void_p
lib.py_build_snn_graph_from_nn_index.argtypes = [
    ct.c_void_p,
    ct.c_int,
    ct.c_void_p,
    ct.c_int,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_snn_graph_edges.restype = ct.c_int
lib.py_fetch_snn_graph_edges.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_snn_graph_indices.restype = ct.c_void_p
lib.py_fetch_snn_graph_indices.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_snn_graph_weights.restype = ct.c_void_p
lib.py_fetch_snn_graph_weights.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_free_snn_graph.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_build_neighbor_index.restype = ct.c_void_p
lib.py_build_neighbor_index.argtypes = [
    ct.c_int,
    ct.c_int,
    ct.c_void_p,
    ct.c_uint8,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_neighbor_index_ndim.restype = ct.c_int
lib.py_fetch_neighbor_index_ndim.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_neighbor_index_nobs.restype = ct.c_int
lib.py_fetch_neighbor_index_nobs.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_free_neighbor_index.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_find_nearest_neighbors.restype = ct.c_void_p
lib.py_find_nearest_neighbors.argtypes = [
    ct.c_void_p,
    ct.c_int,
    ct.c_int,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_neighbor_results_nobs.restype = ct.c_int
lib.py_fetch_neighbor_results_nobs.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_neighbor_results_k.restype = ct.c_int
lib.py_fetch_neighbor_results_k.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_neighbor_results_single.argtypes = [
    ct.c_void_p,
    ct.c_int,
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_free_neighbor_results.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_serialize_neighbor_results.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_unserialize_neighbor_results.restype = ct.c_void_p
lib.py_unserialize_neighbor_results.argtypes = [
    ct.c_int,
    ct.c_int,
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

def log_norm_counts(mat0, use_block, block, use_size_factors, size_factors, center, allow_zeros, allow_non_finite, num_threads):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_log_norm_counts(mat0, use_block, block, use_size_factors, size_factors, center, allow_zeros, allow_non_finite, num_threads, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def build_snn_graph_from_nn_results(x, weight_scheme, num_threads):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_build_snn_graph_from_nn_results(x, weight_scheme, num_threads, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def build_snn_graph_from_nn_index(x, num_neighbors, weight_scheme, num_threads):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_build_snn_graph_from_nn_index(x, num_neighbors, weight_scheme, num_threads, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_snn_graph_edges(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_snn_graph_edges(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_snn_graph_indices(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_snn_graph_indices(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_snn_graph_weights(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_snn_graph_weights(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def free_snn_graph(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_free_snn_graph(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def build_neighbor_index(ndim, nobs, ptr, approximate):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_build_neighbor_index(ndim, nobs, ptr, approximate, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_neighbor_index_ndim(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_neighbor_index_ndim(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_neighbor_index_nobs(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_neighbor_index_nobs(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def free_neighbor_index(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_free_neighbor_index(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def find_nearest_neighbors(index, k, nthreads):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_find_nearest_neighbors(index, k, nthreads, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_neighbor_results_nobs(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_neighbor_results_nobs(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_neighbor_results_k(ptr0):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_neighbor_results_k(ptr0, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def fetch_neighbor_results_single(ptr0, i, outdex, outdist):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_fetch_neighbor_results_single(ptr0, i, outdex, outdist, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def free_neighbor_results(ptr):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_free_neighbor_results(ptr, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def serialize_neighbor_results(ptr0, outdex, outdist):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_serialize_neighbor_results(ptr0, outdex, outdist, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def unserialize_neighbor_results(nobs, k, indices, distances):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_unserialize_neighbor_results(nobs, k, indices, distances, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___